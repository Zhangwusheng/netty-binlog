// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package mysqlstreamer is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	BinlogEvent
	EventHeader
	QueryEvent
	Record
	Item
	PrimaryKey
	RowEvent
*/
package mysqlstreamer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_UNKNOWN_EVENT    EventType = 0
	EventType_QUERY_EVENT      EventType = 1
	EventType_WRITE_ROW_EVENT  EventType = 2
	EventType_DELETE_ROW_EVENT EventType = 3
	EventType_UPDATE_ROW_EVENT EventType = 4
	EventType_XID_EVENT        EventType = 5
)

var EventType_name = map[int32]string{
	0: "UNKNOWN_EVENT",
	1: "QUERY_EVENT",
	2: "WRITE_ROW_EVENT",
	3: "DELETE_ROW_EVENT",
	4: "UPDATE_ROW_EVENT",
	5: "XID_EVENT",
}
var EventType_value = map[string]int32{
	"UNKNOWN_EVENT":    0,
	"QUERY_EVENT":      1,
	"WRITE_ROW_EVENT":  2,
	"DELETE_ROW_EVENT": 3,
	"UPDATE_ROW_EVENT": 4,
	"XID_EVENT":        5,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BinlogEvent struct {
	// header
	Header *EventHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// GTID
	Gtid string `protobuf:"bytes,2,opt,name=gtid" json:"gtid,omitempty"`
	// query event
	QueryEvent *QueryEvent `protobuf:"bytes,3,opt,name=queryEvent" json:"queryEvent,omitempty"`
	// write row event
	RowEvent *RowEvent `protobuf:"bytes,4,opt,name=rowEvent" json:"rowEvent,omitempty"`
}

func (m *BinlogEvent) Reset()                    { *m = BinlogEvent{} }
func (m *BinlogEvent) String() string            { return proto.CompactTextString(m) }
func (*BinlogEvent) ProtoMessage()               {}
func (*BinlogEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BinlogEvent) GetHeader() *EventHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BinlogEvent) GetGtid() string {
	if m != nil {
		return m.Gtid
	}
	return ""
}

func (m *BinlogEvent) GetQueryEvent() *QueryEvent {
	if m != nil {
		return m.QueryEvent
	}
	return nil
}

func (m *BinlogEvent) GetRowEvent() *RowEvent {
	if m != nil {
		return m.RowEvent
	}
	return nil
}

type EventHeader struct {
	Timestamp      int64     `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventType      EventType `protobuf:"varint,2,opt,name=eventType,enum=mysqlstreamer.EventType" json:"eventType,omitempty"`
	ServerId       int64     `protobuf:"varint,3,opt,name=serverId" json:"serverId,omitempty"`
	EventSize      int64     `protobuf:"varint,4,opt,name=eventSize" json:"eventSize,omitempty"`
	BinlogFileName string    `protobuf:"bytes,5,opt,name=binlogFileName" json:"binlogFileName,omitempty"`
	BinlogPosition int64     `protobuf:"varint,6,opt,name=binlogPosition" json:"binlogPosition,omitempty"`
}

func (m *EventHeader) Reset()                    { *m = EventHeader{} }
func (m *EventHeader) String() string            { return proto.CompactTextString(m) }
func (*EventHeader) ProtoMessage()               {}
func (*EventHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EventHeader) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_UNKNOWN_EVENT
}

func (m *EventHeader) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *EventHeader) GetEventSize() int64 {
	if m != nil {
		return m.EventSize
	}
	return 0
}

func (m *EventHeader) GetBinlogFileName() string {
	if m != nil {
		return m.BinlogFileName
	}
	return ""
}

func (m *EventHeader) GetBinlogPosition() int64 {
	if m != nil {
		return m.BinlogPosition
	}
	return 0
}

type QueryEvent struct {
	ThreadId      int64  `protobuf:"varint,1,opt,name=threadId" json:"threadId,omitempty"`
	ExecutionTime int64  `protobuf:"varint,2,opt,name=executionTime" json:"executionTime,omitempty"`
	ErrorCode     int32  `protobuf:"varint,3,opt,name=errorCode" json:"errorCode,omitempty"`
	Database      string `protobuf:"bytes,4,opt,name=database" json:"database,omitempty"`
	Sql           string `protobuf:"bytes,5,opt,name=sql" json:"sql,omitempty"`
}

func (m *QueryEvent) Reset()                    { *m = QueryEvent{} }
func (m *QueryEvent) String() string            { return proto.CompactTextString(m) }
func (*QueryEvent) ProtoMessage()               {}
func (*QueryEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryEvent) GetThreadId() int64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *QueryEvent) GetExecutionTime() int64 {
	if m != nil {
		return m.ExecutionTime
	}
	return 0
}

func (m *QueryEvent) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *QueryEvent) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *QueryEvent) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

type Record struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Record) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type Item struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Item) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type PrimaryKey struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Position int32  `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
}

func (m *PrimaryKey) Reset()                    { *m = PrimaryKey{} }
func (m *PrimaryKey) String() string            { return proto.CompactTextString(m) }
func (*PrimaryKey) ProtoMessage()               {}
func (*PrimaryKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PrimaryKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrimaryKey) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type RowEvent struct {
	TableName  string        `protobuf:"bytes,1,opt,name=tableName" json:"tableName,omitempty"`
	Before     []*Record     `protobuf:"bytes,2,rep,name=before" json:"before,omitempty"`
	After      []*Record     `protobuf:"bytes,3,rep,name=after" json:"after,omitempty"`
	PrimaryKey []*PrimaryKey `protobuf:"bytes,4,rep,name=primaryKey" json:"primaryKey,omitempty"`
}

func (m *RowEvent) Reset()                    { *m = RowEvent{} }
func (m *RowEvent) String() string            { return proto.CompactTextString(m) }
func (*RowEvent) ProtoMessage()               {}
func (*RowEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RowEvent) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *RowEvent) GetBefore() []*Record {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *RowEvent) GetAfter() []*Record {
	if m != nil {
		return m.After
	}
	return nil
}

func (m *RowEvent) GetPrimaryKey() []*PrimaryKey {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func init() {
	proto.RegisterType((*BinlogEvent)(nil), "mysqlstreamer.BinlogEvent")
	proto.RegisterType((*EventHeader)(nil), "mysqlstreamer.EventHeader")
	proto.RegisterType((*QueryEvent)(nil), "mysqlstreamer.QueryEvent")
	proto.RegisterType((*Record)(nil), "mysqlstreamer.Record")
	proto.RegisterType((*Item)(nil), "mysqlstreamer.Item")
	proto.RegisterType((*PrimaryKey)(nil), "mysqlstreamer.PrimaryKey")
	proto.RegisterType((*RowEvent)(nil), "mysqlstreamer.RowEvent")
	proto.RegisterEnum("mysqlstreamer.EventType", EventType_name, EventType_value)
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x94, 0xd1, 0x8e, 0xd2, 0x4c,
	0x14, 0xc7, 0xbf, 0x6e, 0x29, 0xa1, 0x87, 0xb0, 0xcb, 0x37, 0xac, 0x5a, 0x89, 0x17, 0xa4, 0x31,
	0x06, 0x35, 0xcb, 0x05, 0x24, 0x26, 0x26, 0xde, 0x88, 0xd4, 0x48, 0xd6, 0xb0, 0xec, 0x08, 0xa2,
	0x57, 0x9b, 0x81, 0x1e, 0xd8, 0x26, 0x2d, 0x85, 0xe9, 0x80, 0x8b, 0x37, 0xbe, 0x87, 0x2f, 0xe3,
	0x95, 0x8f, 0xe3, 0x3b, 0x98, 0x99, 0x96, 0x16, 0x9a, 0x8d, 0x77, 0x73, 0xfe, 0xfd, 0x9d, 0xd3,
	0xf3, 0x3f, 0x3d, 0x1d, 0xa8, 0x04, 0x18, 0x45, 0x6c, 0x81, 0xad, 0x15, 0x0f, 0x45, 0x48, 0x2a,
	0xc1, 0x2e, 0x5a, 0xfb, 0x91, 0xe0, 0xc8, 0x02, 0xe4, 0xf6, 0x6f, 0x0d, 0xca, 0x5d, 0x6f, 0xe9,
	0x87, 0x0b, 0x67, 0x8b, 0x4b, 0x41, 0xda, 0x50, 0xbc, 0x45, 0xe6, 0x22, 0xb7, 0xb4, 0x86, 0xd6,
	0x2c, 0xb7, 0xeb, 0xad, 0x23, 0xbe, 0xa5, 0xa8, 0x0f, 0x8a, 0xa0, 0x09, 0x49, 0x08, 0x14, 0x16,
	0xc2, 0x73, 0xad, 0x93, 0x86, 0xd6, 0x34, 0xa9, 0x3a, 0x93, 0xd7, 0x00, 0xeb, 0x0d, 0xf2, 0x9d,
	0xe2, 0x2d, 0x5d, 0xd5, 0x7a, 0x9c, 0xab, 0x75, 0x9d, 0x02, 0xf4, 0x00, 0x26, 0x1d, 0x28, 0xf1,
	0xf0, 0x5b, 0x9c, 0x58, 0x50, 0x89, 0x8f, 0x72, 0x89, 0x34, 0x79, 0x4c, 0x53, 0xd0, 0xfe, 0xa3,
	0x41, 0xf9, 0xa0, 0x37, 0xf2, 0x04, 0x4c, 0xe1, 0x05, 0x18, 0x09, 0x16, 0xac, 0x94, 0x15, 0x9d,
	0x66, 0x02, 0x79, 0x05, 0x26, 0x4a, 0x78, 0xb4, 0x5b, 0xa1, 0x6a, 0xfb, 0xb4, 0x6d, 0xdd, 0x67,
	0x54, 0x3e, 0xa7, 0x19, 0x4a, 0xea, 0x50, 0x8a, 0x90, 0x6f, 0x91, 0xf7, 0x5d, 0xe5, 0x49, 0xa7,
	0x69, 0x2c, 0xdf, 0xa8, 0xc0, 0x4f, 0xde, 0x77, 0x54, 0x7d, 0xeb, 0x34, 0x13, 0xc8, 0x33, 0x38,
	0x9d, 0xaa, 0x31, 0xbf, 0xf7, 0x7c, 0x1c, 0xb0, 0x00, 0x2d, 0x43, 0x4d, 0x2b, 0xa7, 0x66, 0xdc,
	0x30, 0x8c, 0x3c, 0xe1, 0x85, 0x4b, 0xab, 0xa8, 0x4a, 0xe5, 0x54, 0xfb, 0xa7, 0x06, 0x90, 0xcd,
	0x4f, 0x36, 0x26, 0x6e, 0x39, 0x32, 0xb7, 0xef, 0x26, 0x6e, 0xd3, 0x98, 0x3c, 0x85, 0x0a, 0xde,
	0xe1, 0x6c, 0x23, 0xf3, 0x46, 0x5e, 0x10, 0x1b, 0xd6, 0xe9, 0xb1, 0xa8, 0xda, 0xe7, 0x3c, 0xe4,
	0xef, 0x42, 0x17, 0x95, 0x37, 0x83, 0x66, 0x82, 0xac, 0xef, 0x32, 0xc1, 0xa6, 0x2c, 0x8a, 0xbd,
	0x99, 0x34, 0x8d, 0x49, 0x15, 0xf4, 0x68, 0xed, 0x27, 0x7e, 0xe4, 0xd1, 0xee, 0x40, 0x91, 0xe2,
	0x2c, 0xe4, 0x2e, 0x79, 0x0e, 0x86, 0x27, 0x30, 0x88, 0x2c, 0xad, 0xa1, 0x37, 0xcb, 0xed, 0x5a,
	0x6e, 0xc8, 0x7d, 0x81, 0x01, 0x8d, 0x09, 0xbb, 0x07, 0x05, 0x19, 0xca, 0x6d, 0x5a, 0xca, 0xf9,
	0x68, 0xf1, 0x36, 0xc9, 0xb3, 0xd4, 0xc4, 0xfe, 0x53, 0x99, 0x54, 0x9d, 0xc9, 0x39, 0x18, 0x5b,
	0xe6, 0x6f, 0xe2, 0x66, 0x4d, 0x1a, 0x07, 0xf6, 0x1b, 0x80, 0x21, 0xf7, 0x02, 0xc6, 0x77, 0x97,
	0xb8, 0xbb, 0xb7, 0x56, 0x1d, 0x4a, 0xab, 0xfd, 0x6c, 0x4f, 0x94, 0xcf, 0x34, 0xb6, 0x7f, 0x69,
	0x50, 0xda, 0x2f, 0x97, 0x5a, 0x21, 0x36, 0x4d, 0xbe, 0x56, 0x5c, 0x21, 0x13, 0xc8, 0x05, 0x14,
	0xa7, 0x38, 0x0f, 0xb9, 0x6c, 0x4a, 0x5a, 0x7b, 0x90, 0xdf, 0x51, 0x35, 0x00, 0x9a, 0x40, 0xe4,
	0x25, 0x18, 0x6c, 0x2e, 0x90, 0x5b, 0xfa, 0xbf, 0xe8, 0x98, 0x91, 0x3f, 0xcf, 0x2a, 0x35, 0x61,
	0x15, 0x54, 0x46, 0xfe, 0xe7, 0xc9, 0x5c, 0xd2, 0x03, 0xf8, 0xc5, 0x0f, 0x30, 0xd3, 0xcd, 0x25,
	0xff, 0x43, 0x65, 0x3c, 0xb8, 0x1c, 0x5c, 0x4d, 0x06, 0x37, 0xce, 0x67, 0x67, 0x30, 0xaa, 0xfe,
	0x47, 0xce, 0xa0, 0x7c, 0x3d, 0x76, 0xe8, 0xd7, 0x44, 0xd0, 0x48, 0x0d, 0xce, 0x26, 0xb4, 0x3f,
	0x72, 0x6e, 0xe8, 0xd5, 0x24, 0x11, 0x4f, 0xc8, 0x39, 0x54, 0x7b, 0xce, 0x47, 0xe7, 0x48, 0xd5,
	0xa5, 0x3a, 0x1e, 0xf6, 0xde, 0x1e, 0xa9, 0x05, 0x52, 0x01, 0xf3, 0x4b, 0xbf, 0x97, 0x84, 0x46,
	0xf7, 0x02, 0x1e, 0xce, 0xc2, 0xa0, 0xc5, 0x7c, 0xbc, 0x3b, 0xee, 0xb8, 0x5b, 0x1b, 0xca, 0x0b,
	0xa8, 0xbb, 0x99, 0x1f, 0xdc, 0x37, 0xd3, 0xa2, 0xba, 0x95, 0x3a, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x26, 0xd9, 0x9b, 0xbf, 0xa6, 0x04, 0x00, 0x00,
}
